let path,fs,collectiveSlugFromUrl,report,reportAndThrowError;_fa4‍.x([["fetchStats",()=>fetchStats],["fetchLogo",()=>fetchLogo],["fetchPkg",()=>fetchPkg]]);_fa4‍.w("path",[["default",["path"],function(v){path=v}]]);_fa4‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_fa4‍.w("./transforms",[["collectiveSlugFromUrl",["collectiveSlugFromUrl"],function(v){collectiveSlugFromUrl=v}]]);_fa4‍.w("./misc",[["report",["report"],function(v){report=v}],["reportAndThrowError",["reportAndThrowError"],function(v){reportAndThrowError=v}]]);




const fetchJson = async url => {
  try {
    return (await global.fetch(`${url}.json`)).json()
  } catch (e) {
    _fa4‍.a("report",report)(e)
    _fa4‍.a("reportAndThrowError",reportAndThrowError)(`Could not fetch ${url}.json`)
  }
}

       const fetchStats = async collectiveUrl => {
  try {
    return await fetchJson(collectiveUrl)
  } catch (e) {
    _fa4‍.a("report",report)(e)
    _fa4‍.a("report",report)(`Could not load the stats for ${_fa4‍.a("collectiveSlugFromUrl",collectiveSlugFromUrl)(collectiveUrl)}`)
  }
};_fa4‍.j(["fetchStats"]);

       const fetchLogo = async logoUrl => {
  if (!logoUrl) {
    // Silent return if no logo has been provided
    return
  }
  if (!logoUrl.match(/^https?:\/\//)) {
    _fa4‍.a("reportAndThrowError",reportAndThrowError)(`Your logo URL isn't well-formatted - ${logoUrl}`)
  }

  try {
    const res = (await global.fetch(logoUrl))
    if (isLogoResponseWellFormatted(res)) {
      return res.text()
    }
    _fa4‍.a("report",report)(`Error while fetching logo from ${logoUrl}. The response wasn't well-formatted`)
  } catch (e) {
    _fa4‍.a("report",report)(`Error while fetching logo from ${logoUrl}`)
  }
};_fa4‍.j(["fetchLogo"]);

const isLogoResponseWellFormatted = res => res.status === 200 && res.headers.get('content-type').match(/^text\/plain/)

       const fetchPkg = pathToPkg => {
  const fullPathToPkg = _fa4‍.a("path",path).resolve(`${pathToPkg}/package.json`)
  try {
    return JSON.parse(_fa4‍.a("fs",fs).readFileSync(fullPathToPkg, 'utf8'))
  } catch (e) {
    _fa4‍.a("reportAndThrowError",reportAndThrowError)(`Could not find package.json at ${fullPathToPkg}`)
  }
};_fa4‍.j(["fetchPkg"]);
